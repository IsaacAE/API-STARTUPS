{"ast":null,"code":"import { usuarios } from './Data';\n\n// Función para crear un nuevo usuario\nfunction crearUsuario(nombre, apPat, password, apMat = null, email = null, profilePicture = null, superUser = null) {\n  usuarios.push({\n    idUsuario: usuarios.length + 1,\n    nombre: nombre,\n    apPat: apPat,\n    apMat: apMat,\n    password: password,\n    email: email,\n    profilePicture: null,\n    superUser: superUser\n  });\n  alert('User registered successfully');\n}\n\n// Función para obtener todos los usuarios\nfunction leerUsuarios() {\n  return usuarios;\n}\n\n// Función para obtener un usuario por su ID\nfunction leerUsuarioPorId(id) {\n  return usuarios.find(usuario => usuario.id === id);\n}\n\n// Función para actualizar un usuario por su ID\nfunction actualizarUsuario(id, nombre = null, apPat = null, apMat = null, password = null, email = null, profilePicture = null, superUser = null) {\n  const usuario = leerUsuarioPorId(id);\n  if (!usuario) return -1; // Usuario no encontrado\n  if (nombre) usuario.nombre = nombre;\n  if (apPat) usuario.apPat = apPat;\n  if (apMat) usuario.apMat = apMat;\n  if (password) usuario.password = password;\n  if (email) usuario.email = email;\n  if (profilePicture) usuario.profilePicture = profilePicture;\n  if (superUser !== null) usuario.superUser = superUser;\n  return 0; // Éxito\n}\n\n// Función para eliminar un usuario por su ID\nfunction eliminarUsuario(idUsuario = null) {\n  if (!idUsuario) {\n    usuarios.splice(0, usuarios.length); // Vaciar la lista de usuarios\n    return 0; // Éxito\n  } else {\n    const index = usuarios.findIndex(usuario => usuario.id === idUsuario);\n    if (index !== -1) {\n      usuarios.splice(index, 1); // Eliminar usuario por su índice\n      return 0; // Éxito\n    } else {\n      return -1; // Usuario no encontrado\n    }\n  }\n}\nexport { crearUsuario, leerUsuarios, leerUsuarioPorId, actualizarUsuario, eliminarUsuario };","map":{"version":3,"names":["usuarios","crearUsuario","nombre","apPat","password","apMat","email","profilePicture","superUser","push","idUsuario","length","alert","leerUsuarios","leerUsuarioPorId","id","find","usuario","actualizarUsuario","eliminarUsuario","splice","index","findIndex"],"sources":["/home/vox/Documentos/IngeSoft/Ing-Software-2024-2/my-app/src/DataBase/DataOperations.js"],"sourcesContent":["import { usuarios } from './Data';\n\n// Función para crear un nuevo usuario\nfunction crearUsuario(nombre, apPat, password, apMat=null, email=null, profilePicture=null, superUser=null) {\n     usuarios.push({\n        idUsuario: usuarios.length + 1,\n        nombre: nombre,\n        apPat: apPat,\n        apMat: apMat,\n        password: password,\n        email: email,\n        profilePicture: null,\n        superUser: superUser\n    })\n    alert('User registered successfully')\n}\n\n// Función para obtener todos los usuarios\nfunction leerUsuarios() {\n    return usuarios;\n}\n\n// Función para obtener un usuario por su ID\nfunction leerUsuarioPorId(id) {\n    return usuarios.find(usuario => usuario.id === id);\n}\n\n// Función para actualizar un usuario por su ID\nfunction actualizarUsuario(id, nombre=null, apPat=null, apMat=null, password=null, email=null, profilePicture=null, superUser=null) {\n    const usuario = leerUsuarioPorId(id);\n    if (!usuario) return -1; // Usuario no encontrado\n    if (nombre) usuario.nombre = nombre;\n    if (apPat) usuario.apPat = apPat;\n    if (apMat) usuario.apMat = apMat;\n    if (password) usuario.password = password;\n    if (email) usuario.email = email;\n    if (profilePicture) usuario.profilePicture = profilePicture;\n    if (superUser !== null) usuario.superUser = superUser;\n    return 0; // Éxito\n}\n\n// Función para eliminar un usuario por su ID\nfunction eliminarUsuario(idUsuario=null) {\n    if (!idUsuario) {\n        usuarios.splice(0, usuarios.length); // Vaciar la lista de usuarios\n        return 0; // Éxito\n    } else {\n        const index = usuarios.findIndex(usuario => usuario.id === idUsuario);\n        if (index !== -1) {\n            usuarios.splice(index, 1); // Eliminar usuario por su índice\n            return 0; // Éxito\n        } else {\n            return -1; // Usuario no encontrado\n        }\n    }\n}\n\n\n\nexport { crearUsuario, leerUsuarios, leerUsuarioPorId, actualizarUsuario, eliminarUsuario };\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,QAAQ;;AAEjC;AACA,SAASC,YAAYA,CAACC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,GAAC,IAAI,EAAEC,KAAK,GAAC,IAAI,EAAEC,cAAc,GAAC,IAAI,EAAEC,SAAS,GAAC,IAAI,EAAE;EACvGR,QAAQ,CAACS,IAAI,CAAC;IACXC,SAAS,EAAEV,QAAQ,CAACW,MAAM,GAAG,CAAC;IAC9BT,MAAM,EAAEA,MAAM;IACdC,KAAK,EAAEA,KAAK;IACZE,KAAK,EAAEA,KAAK;IACZD,QAAQ,EAAEA,QAAQ;IAClBE,KAAK,EAAEA,KAAK;IACZC,cAAc,EAAE,IAAI;IACpBC,SAAS,EAAEA;EACf,CAAC,CAAC;EACFI,KAAK,CAAC,8BAA8B,CAAC;AACzC;;AAEA;AACA,SAASC,YAAYA,CAAA,EAAG;EACpB,OAAOb,QAAQ;AACnB;;AAEA;AACA,SAASc,gBAAgBA,CAACC,EAAE,EAAE;EAC1B,OAAOf,QAAQ,CAACgB,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKA,EAAE,CAAC;AACtD;;AAEA;AACA,SAASG,iBAAiBA,CAACH,EAAE,EAAEb,MAAM,GAAC,IAAI,EAAEC,KAAK,GAAC,IAAI,EAAEE,KAAK,GAAC,IAAI,EAAED,QAAQ,GAAC,IAAI,EAAEE,KAAK,GAAC,IAAI,EAAEC,cAAc,GAAC,IAAI,EAAEC,SAAS,GAAC,IAAI,EAAE;EAChI,MAAMS,OAAO,GAAGH,gBAAgB,CAACC,EAAE,CAAC;EACpC,IAAI,CAACE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAIf,MAAM,EAAEe,OAAO,CAACf,MAAM,GAAGA,MAAM;EACnC,IAAIC,KAAK,EAAEc,OAAO,CAACd,KAAK,GAAGA,KAAK;EAChC,IAAIE,KAAK,EAAEY,OAAO,CAACZ,KAAK,GAAGA,KAAK;EAChC,IAAID,QAAQ,EAAEa,OAAO,CAACb,QAAQ,GAAGA,QAAQ;EACzC,IAAIE,KAAK,EAAEW,OAAO,CAACX,KAAK,GAAGA,KAAK;EAChC,IAAIC,cAAc,EAAEU,OAAO,CAACV,cAAc,GAAGA,cAAc;EAC3D,IAAIC,SAAS,KAAK,IAAI,EAAES,OAAO,CAACT,SAAS,GAAGA,SAAS;EACrD,OAAO,CAAC,CAAC,CAAC;AACd;;AAEA;AACA,SAASW,eAAeA,CAACT,SAAS,GAAC,IAAI,EAAE;EACrC,IAAI,CAACA,SAAS,EAAE;IACZV,QAAQ,CAACoB,MAAM,CAAC,CAAC,EAAEpB,QAAQ,CAACW,MAAM,CAAC,CAAC,CAAC;IACrC,OAAO,CAAC,CAAC,CAAC;EACd,CAAC,MAAM;IACH,MAAMU,KAAK,GAAGrB,QAAQ,CAACsB,SAAS,CAACL,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKL,SAAS,CAAC;IACrE,IAAIW,KAAK,KAAK,CAAC,CAAC,EAAE;MACdrB,QAAQ,CAACoB,MAAM,CAACC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;MAC3B,OAAO,CAAC,CAAC,CAAC;IACd,CAAC,MAAM;MACH,OAAO,CAAC,CAAC,CAAC,CAAC;IACf;EACJ;AACJ;AAIA,SAASpB,YAAY,EAAEY,YAAY,EAAEC,gBAAgB,EAAEI,iBAAiB,EAAEC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}