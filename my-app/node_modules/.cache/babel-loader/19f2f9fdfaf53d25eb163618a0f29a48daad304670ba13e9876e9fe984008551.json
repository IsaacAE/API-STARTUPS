{"ast":null,"code":"import { usuarios } from './Data';\n\n// Función para crear un nuevo usuario\n// Función para crear un nuevo usuario\nfunction crearUsuario(nombre, apPat, password, apMat = null, email = null, profilePicture = null, superUser = null) {\n  // Verifica si ya existe un usuario con el mismo correo electrónico\n  const usuarioExistente = usuarios.find(usuario => usuario.email === email);\n  if (usuarioExistente) {\n    alert('Ya existe un usuario con el mismo correo electrónico.');\n    return 0; // Devuelve 0 si ya existe un usuario con el mismo correo electrónico\n  }\n\n  // Si no hay usuario existente con el mismo correo electrónico, agrega el nuevo usuario\n  usuarios.push({\n    idUsuario: usuarios.length + 1,\n    nombre: nombre,\n    apPat: apPat,\n    apMat: apMat,\n    password: password,\n    email: email,\n    profilePicture: profilePicture,\n    // Considera pasar el valor recibido en lugar de null\n    superUser: superUser\n  });\n  alert('Usuario registrado exitosamente.');\n  return 1; // Devuelve 1 si se ha registrado el usuario exitosamente\n}\n\n// Función para obtener todos los usuarios\nfunction leerUsuarios() {\n  return usuarios;\n}\n\n// Función para obtener un usuario por su ID\n// Función para obtener un usuario por su ID\nfunction leerUsuarioPorId(idUsuario) {\n  return usuarios.find(usuario => usuario.idUsuario === idUsuario);\n}\n\n// Función para actualizar un usuario por su ID\nfunction actualizarUsuario(id, nombre = null, apPat = null, apMat = null, password = null, email = null, superUser = null) {\n  const usuario = leerUsuarioPorId(id);\n  if (!usuario) return -1; // Usuario no encontrado\n  if (nombre) usuario.nombre = nombre;\n  if (apPat) usuario.apPat = apPat;\n  if (apMat) usuario.apMat = apMat;\n  if (password) usuario.password = password;\n  if (email) usuario.email = email;\n  if (superUser !== null) {\n    usuario.superUser = superUser ? 1 : 0;\n  }\n  return 0; // Éxito\n}\n\n// Función para eliminar un usuario por su ID\nfunction eliminarUsuario(idUsuario = null) {\n  if (!idUsuario) {\n    usuarios.splice(0, usuarios.length); // Vaciar la lista de usuarios\n    return 0; // Éxito\n  } else {\n    const index = usuarios.findIndex(usuario => usuario.id === idUsuario);\n    if (index !== -1) {\n      usuarios.splice(index, 1); // Eliminar usuario por su índice\n      return 0; // Éxito\n    } else {\n      return -1; // Usuario no encontrado\n    }\n  }\n}\nexport { crearUsuario, leerUsuarios, leerUsuarioPorId, actualizarUsuario, eliminarUsuario };","map":{"version":3,"names":["usuarios","crearUsuario","nombre","apPat","password","apMat","email","profilePicture","superUser","usuarioExistente","find","usuario","alert","push","idUsuario","length","leerUsuarios","leerUsuarioPorId","actualizarUsuario","id","eliminarUsuario","splice","index","findIndex"],"sources":["/home/vox/Documentos/IngenieriaSoft/Ing-Software-2024-2/my-app/src/DataBase/DataOperations.js"],"sourcesContent":["import { usuarios } from './Data';\n\n// Función para crear un nuevo usuario\n// Función para crear un nuevo usuario\nfunction crearUsuario(nombre, apPat, password, apMat = null, email = null, profilePicture = null, superUser = null) {\n    // Verifica si ya existe un usuario con el mismo correo electrónico\n    const usuarioExistente = usuarios.find(usuario => usuario.email === email);\n    if (usuarioExistente) {\n        alert('Ya existe un usuario con el mismo correo electrónico.');\n        return 0; // Devuelve 0 si ya existe un usuario con el mismo correo electrónico\n    }\n\n    // Si no hay usuario existente con el mismo correo electrónico, agrega el nuevo usuario\n    usuarios.push({\n        idUsuario: usuarios.length + 1,\n        nombre: nombre,\n        apPat: apPat,\n        apMat: apMat,\n        password: password,\n        email: email,\n        profilePicture: profilePicture, // Considera pasar el valor recibido en lugar de null\n        superUser: superUser\n    });\n    \n    alert('Usuario registrado exitosamente.');\n    return 1; // Devuelve 1 si se ha registrado el usuario exitosamente\n}\n\n// Función para obtener todos los usuarios\nfunction leerUsuarios() {\n    return usuarios;\n}\n\n// Función para obtener un usuario por su ID\n// Función para obtener un usuario por su ID\nfunction leerUsuarioPorId(idUsuario) {\n    return usuarios.find(usuario => usuario.idUsuario === idUsuario);\n}\n\n// Función para actualizar un usuario por su ID\nfunction actualizarUsuario(id, nombre=null, apPat=null, apMat=null, password=null, email=null, superUser=null) {\n    const usuario = leerUsuarioPorId(id);\n    if (!usuario) return -1; // Usuario no encontrado\n    if (nombre) usuario.nombre = nombre;\n    if (apPat) usuario.apPat = apPat;\n    if (apMat) usuario.apMat = apMat;\n    if (password) usuario.password = password;\n    if (email) usuario.email = email;\n    if (superUser !== null) {\n        usuario.superUser = superUser ? 1 : 0;\n    }\n    return 0; // Éxito\n}\n\n// Función para eliminar un usuario por su ID\nfunction eliminarUsuario(idUsuario=null) {\n    if (!idUsuario) {\n        usuarios.splice(0, usuarios.length); // Vaciar la lista de usuarios\n        return 0; // Éxito\n    } else {\n        const index = usuarios.findIndex(usuario => usuario.id === idUsuario);\n        if (index !== -1) {\n            usuarios.splice(index, 1); // Eliminar usuario por su índice\n            return 0; // Éxito\n        } else {\n            return -1; // Usuario no encontrado\n        }\n    }\n}\n\n\n\nexport { crearUsuario, leerUsuarios, leerUsuarioPorId, actualizarUsuario, eliminarUsuario };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}