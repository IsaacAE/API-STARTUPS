{"ast":null,"code":"import { usuarios, peliculas, rentas } from './Data';\n\n// Función para crear un nuevo usuario\n// Función para crear un nuevo usuario\nfunction crearUsuario(nombre, apPat, password, apMat = null, email = null, profilePicture = null, superUser = null) {\n  // Verifica si ya existe un usuario con el mismo correo electrónico\n  const usuarioExistente = usuarios.find(usuario => usuario.email === email);\n  if (usuarioExistente) {\n    alert('Ya existe un usuario con el mismo correo electrónico.');\n    return 0; // Devuelve 0 si ya existe un usuario con el mismo correo electrónico\n  }\n\n  // Obtener el último ID de usuario en la lista\n  const ultimoId = usuarios.length > 0 ? usuarios[usuarios.length - 1].idUsuario : 0;\n\n  // Incrementar el último ID para obtener un ID único para el nuevo usuario\n  const nuevoIdUsuario = ultimoId + 1;\n\n  // Agregar el nuevo usuario con el ID único generado\n  usuarios.push({\n    idUsuario: nuevoIdUsuario,\n    nombre: nombre,\n    apPat: apPat,\n    apMat: apMat,\n    password: password,\n    email: email,\n    profilePicture: profilePicture,\n    superUser: superUser\n  });\n  alert('Usuario registrado exitosamente.');\n  return 1; // Devuelve 1 si se ha registrado el usuario exitosamente\n}\n\n// Función para obtener todos los usuarios\nfunction leerUsuarios() {\n  return usuarios;\n}\n\n// Función para obtener un usuario por su ID\nfunction leerUsuarioPorId(idUsuario) {\n  return usuarios.find(usuario => usuario.idUsuario === idUsuario);\n}\n\n// Función para actualizar un usuario por su ID\nfunction actualizarUsuario(id, nombre = null, apPat = null, apMat = null, password = null, email = null, profilePicture = null, superUser = null) {\n  const usuario = leerUsuarioPorId(id);\n  if (!usuario) return -1; // Usuario no encontrado\n\n  // Verificar si otro usuario ya tiene el correo electrónico\n  if (email && email !== usuario.email) {\n    const usuarioExistente = usuarios.find(u => u.email === email);\n    if (usuarioExistente) return -1; // Otro usuario ya tiene el mismo correo electrónico\n  }\n\n  // Actualizar los atributos del usuario\n  if (nombre) usuario.nombre = nombre;\n  if (apPat) usuario.apPat = apPat;\n  if (apMat) usuario.apMat = apMat;\n  if (password) usuario.password = password;\n  if (email) usuario.email = email;\n  if (profilePicture) usuario.profilePicture = profilePicture;\n  if (superUser !== null) usuario.superUser = superUser;\n  return 0; // Éxito\n}\n\n// Función para eliminar un usuario por su ID y todas sus rentas\nfunction eliminarUsuario(idUsuario = null) {\n  if (!idUsuario) {\n    // Eliminar todas las rentas\n    rentas.splice(0, rentas.length);\n    // Vaciar la lista de usuarios\n    usuarios.splice(0, usuarios.length);\n    return 0; // Éxito\n  } else {\n    const index = usuarios.findIndex(usuario => usuario.idUsuario === idUsuario);\n    if (index !== -1) {\n      // Eliminar las rentas del usuario por su ID\n      eliminarRentasPorIdUsuario(idUsuario);\n      // Eliminar usuario por su índice\n      usuarios.splice(index, 1);\n      return 0; // Éxito\n    } else {\n      return -1; // Usuario no encontrado\n    }\n  }\n}\nfunction crearPelicula(nombre, genero, duracion, inventario) {\n  // Verificar el id de la última película en la lista\n  const ultimoId = peliculas.length > 0 ? peliculas[peliculas.length - 1].idPelicula : 0;\n\n  // Agregar la nueva película con el id incrementado\n  peliculas.push({\n    idPelicula: ultimoId + 1,\n    nombre: nombre,\n    genero: genero,\n    duracion: duracion,\n    inventario: inventario\n  });\n  alert('Usuario registrado exitosamente.');\n  return 1; // Devuelve 1 si se ha registrado el usuario exitosamente\n}\nfunction leerPeliculas() {\n  return peliculas;\n}\nfunction leerPeliculaPorId(idPelicula) {\n  return peliculas.find(pelicula => pelicula.idPelicula === idPelicula);\n}\nfunction actualizarPelicula(idPelicula, nombre = null, genero = null, duracion = null, inventario = null) {\n  const pelicula = leerPeliculaPorId(idPelicula);\n  if (!pelicula) return -1; // Película no encontrada\n  if (nombre) pelicula.nombre = nombre;\n  if (genero) pelicula.genero = genero;\n  if (duracion) pelicula.duracion = duracion;\n  if (inventario) pelicula.inventario = inventario;\n  return 0; // Éxito\n}\nfunction eliminarPelicula(idPelicula = null) {\n  if (!idPelicula) {\n    // Eliminar todas las películas\n    peliculas.splice(0, peliculas.length);\n\n    // Eliminar todas las rentas\n    eliminarRenta(null);\n    return 0; // Éxito\n  } else {\n    const index = peliculas.findIndex(pelicula => pelicula.idPelicula === idPelicula);\n    if (index !== -1) {\n      // Eliminar película por su índice\n      peliculas.splice(index, 1);\n\n      // Eliminar las rentas asociadas a la película eliminada\n      eliminarRenta(idPelicula);\n      return 0; // Éxito\n    } else {\n      return -1; // Película no encontrada\n    }\n  }\n}\nfunction crearRenta(idUsuario, idPelicula, fecha_renta, dias_de_renta, estatus) {\n  // Verificar si existe un usuario con el id proporcionado\n  const usuarioExistente = leerUsuarioPorId(idUsuario);\n  if (!usuarioExistente) {\n    return -1; // Código de error para usuario no encontrado\n  }\n\n  // Verificar si existe una película con el id proporcionado\n  const peliculaExistente = leerPeliculaPorId(idPelicula);\n  if (!peliculaExistente) {\n    return -2; // Código de error para película no encontrada\n  }\n\n  // Verificar el id de la última renta en la lista\n  const ultimoId = rentas.length > 0 ? rentas[rentas.length - 1].idRentar : 0;\n\n  // Agregar la nueva renta con el id incrementado\n  rentas.push({\n    idRentar: ultimoId + 1,\n    idUsuario: idUsuario,\n    idPelicula: idPelicula,\n    fecha_renta: fecha_renta,\n    dias_de_renta: dias_de_renta,\n    estatus: estatus // 0 para renta activa, 1 para renta finalizada\n  });\n\n  // Retornar 1 si todo sale bien\n  return 1;\n}\nfunction leerRentas() {\n  return rentas;\n}\nfunction leerRentaPorId(idRentar) {\n  return rentas.find(renta => renta.idRentar === idRentar);\n}\nfunction actualizarRenta(idRentar, estatus) {\n  const renta = leerRentaPorId(idRentar);\n  if (!renta) return -1; // Renta no encontrada\n  renta.estatus = estatus;\n  return 0; // Éxito\n}\nfunction eliminarRentasPorIdUsuario(idUsuario) {\n  try {\n    // Obtener las rentas asociadas al idUsuario\n    const rentasUsuario = rentas.filter(renta => renta.idUsuario === idUsuario);\n\n    // Eliminar cada renta\n    rentasUsuario.forEach(renta => {\n      eliminarRenta(renta.idRentar);\n    });\n    return 0; // Éxito\n  } catch (error) {\n    console.error('Error al eliminar rentas por ID de usuario:', error);\n    return -1; // Error\n  }\n}\nasync function eliminarRenta(idRentar) {\n  try {\n    // Filtrar las rentas para eliminar la que tenga el idRenta proporcionado\n    rentas = rentas.filter(renta => renta.idRentar !== idRentar);\n    return 0; // Éxito\n  } catch (error) {\n    console.error('Error al eliminar renta:', error);\n    return -1; // Error\n  }\n}\nexport { crearUsuario, leerUsuarios, leerUsuarioPorId, actualizarUsuario, eliminarUsuario, crearPelicula, leerPeliculas, leerPeliculaPorId, actualizarPelicula, eliminarPelicula, crearRenta, leerRentas, leerRentaPorId, actualizarRenta, eliminarRenta };","map":{"version":3,"names":["usuarios","peliculas","rentas","crearUsuario","nombre","apPat","password","apMat","email","profilePicture","superUser","usuarioExistente","find","usuario","alert","ultimoId","length","idUsuario","nuevoIdUsuario","push","leerUsuarios","leerUsuarioPorId","actualizarUsuario","id","u","eliminarUsuario","splice","index","findIndex","eliminarRentasPorIdUsuario","crearPelicula","genero","duracion","inventario","idPelicula","leerPeliculas","leerPeliculaPorId","pelicula","actualizarPelicula","eliminarPelicula","eliminarRenta","crearRenta","fecha_renta","dias_de_renta","estatus","peliculaExistente","idRentar","leerRentas","leerRentaPorId","renta","actualizarRenta","rentasUsuario","filter","forEach","error","console"],"sources":["/home/vox/Documentos/IngenieriaSoft/Ing-Software-2024-2/my-app/src/DataBase/DataOperations.js"],"sourcesContent":["import { usuarios, peliculas, rentas  } from './Data';\n\n// Función para crear un nuevo usuario\n// Función para crear un nuevo usuario\nfunction crearUsuario(nombre, apPat, password, apMat = null, email = null, profilePicture = null, superUser = null) {\n    // Verifica si ya existe un usuario con el mismo correo electrónico\n    const usuarioExistente = usuarios.find(usuario => usuario.email === email);\n    if (usuarioExistente) {\n        alert('Ya existe un usuario con el mismo correo electrónico.');\n        return 0; // Devuelve 0 si ya existe un usuario con el mismo correo electrónico\n    }\n\n    // Obtener el último ID de usuario en la lista\n    const ultimoId = usuarios.length > 0 ? usuarios[usuarios.length - 1].idUsuario : 0;\n\n    // Incrementar el último ID para obtener un ID único para el nuevo usuario\n    const nuevoIdUsuario = ultimoId + 1;\n\n    // Agregar el nuevo usuario con el ID único generado\n    usuarios.push({\n        idUsuario: nuevoIdUsuario,\n        nombre: nombre,\n        apPat: apPat,\n        apMat: apMat,\n        password: password,\n        email: email,\n        profilePicture: profilePicture,\n        superUser: superUser\n    });\n\n    alert('Usuario registrado exitosamente.');\n    return 1; // Devuelve 1 si se ha registrado el usuario exitosamente\n}\n\n\n// Función para obtener todos los usuarios\nfunction leerUsuarios() {\n    return usuarios;\n}\n\n\n// Función para obtener un usuario por su ID\nfunction leerUsuarioPorId(idUsuario) {\n    return usuarios.find(usuario => usuario.idUsuario === idUsuario);\n}\n\n// Función para actualizar un usuario por su ID\nfunction actualizarUsuario(id, nombre=null, apPat=null, apMat=null, password=null, email=null, profilePicture=null, superUser=null) {\n    const usuario = leerUsuarioPorId(id);\n    if (!usuario) return -1; // Usuario no encontrado\n    \n    // Verificar si otro usuario ya tiene el correo electrónico\n    if (email && email !== usuario.email) {\n        const usuarioExistente = usuarios.find(u => u.email === email);\n        if (usuarioExistente) return -1; // Otro usuario ya tiene el mismo correo electrónico\n    }\n    \n    // Actualizar los atributos del usuario\n    if (nombre) usuario.nombre = nombre;\n    if (apPat) usuario.apPat = apPat;\n    if (apMat) usuario.apMat = apMat;\n    if (password) usuario.password = password;\n    if (email) usuario.email = email;\n    if (profilePicture) usuario.profilePicture = profilePicture;\n    if (superUser !== null) usuario.superUser = superUser;\n    \n    return 0; // Éxito\n}\n\n// Función para eliminar un usuario por su ID y todas sus rentas\nfunction eliminarUsuario(idUsuario = null) {\n    if (!idUsuario) {\n        // Eliminar todas las rentas\n        rentas.splice(0, rentas.length);\n        // Vaciar la lista de usuarios\n        usuarios.splice(0, usuarios.length);\n        return 0; // Éxito\n    } else {\n        const index = usuarios.findIndex(usuario => usuario.idUsuario === idUsuario);\n        if (index !== -1) {\n            // Eliminar las rentas del usuario por su ID\n            eliminarRentasPorIdUsuario(idUsuario);\n            // Eliminar usuario por su índice\n            usuarios.splice(index, 1);\n            return 0; // Éxito\n        } else {\n            return -1; // Usuario no encontrado\n        }\n    }\n}\n\n\nfunction crearPelicula(nombre, genero, duracion, inventario) {\n    // Verificar el id de la última película en la lista\n    const ultimoId = peliculas.length > 0 ? peliculas[peliculas.length - 1].idPelicula : 0;\n\n    // Agregar la nueva película con el id incrementado\n    peliculas.push({\n        idPelicula: ultimoId + 1,\n        nombre: nombre,\n        genero: genero,\n        duracion: duracion,\n        inventario: inventario\n    });\n\n    alert('Usuario registrado exitosamente.');\n    return 1; // Devuelve 1 si se ha registrado el usuario exitosamente\n}\n\nfunction leerPeliculas() {\n    return peliculas;\n}\n\n\nfunction leerPeliculaPorId(idPelicula) {\n    return peliculas.find(pelicula => pelicula.idPelicula === idPelicula);\n}\n\n\nfunction actualizarPelicula(idPelicula, nombre = null, genero = null, duracion = null, inventario = null) {\n    const pelicula = leerPeliculaPorId(idPelicula);\n    if (!pelicula) return -1; // Película no encontrada\n    if (nombre) pelicula.nombre = nombre;\n    if (genero) pelicula.genero = genero;\n    if (duracion) pelicula.duracion = duracion;\n    if (inventario) pelicula.inventario = inventario;\n    return 0; // Éxito\n}\n\n\n\nfunction eliminarPelicula(idPelicula = null) {\n    if (!idPelicula) {\n        // Eliminar todas las películas\n        peliculas.splice(0, peliculas.length);\n        \n        // Eliminar todas las rentas\n        eliminarRenta(null);\n        \n        return 0; // Éxito\n    } else {\n        const index = peliculas.findIndex(pelicula => pelicula.idPelicula === idPelicula);\n        if (index !== -1) {\n            // Eliminar película por su índice\n            peliculas.splice(index, 1);\n\n            // Eliminar las rentas asociadas a la película eliminada\n            eliminarRenta(idPelicula);\n            \n            return 0; // Éxito\n        } else {\n            return -1; // Película no encontrada\n        }\n    }\n}\n\nfunction crearRenta(idUsuario, idPelicula, fecha_renta, dias_de_renta, estatus) {\n    // Verificar si existe un usuario con el id proporcionado\n    const usuarioExistente = leerUsuarioPorId(idUsuario);\n    if (!usuarioExistente) {\n        return -1; // Código de error para usuario no encontrado\n    }\n\n    // Verificar si existe una película con el id proporcionado\n    const peliculaExistente = leerPeliculaPorId(idPelicula);\n    if (!peliculaExistente) {\n        return -2; // Código de error para película no encontrada\n    }\n\n    // Verificar el id de la última renta en la lista\n    const ultimoId = rentas.length > 0 ? rentas[rentas.length - 1].idRentar : 0;\n\n    // Agregar la nueva renta con el id incrementado\n    rentas.push({\n        idRentar: ultimoId + 1,\n        idUsuario: idUsuario,\n        idPelicula: idPelicula,\n        fecha_renta: fecha_renta,\n        dias_de_renta: dias_de_renta,\n        estatus: estatus // 0 para renta activa, 1 para renta finalizada\n    });\n\n    // Retornar 1 si todo sale bien\n    return 1;\n}\n\nfunction leerRentas() {\n    return rentas;\n}\n\nfunction leerRentaPorId(idRentar) {\n    return rentas.find(renta => renta.idRentar === idRentar);\n}\n\nfunction actualizarRenta(idRentar, estatus) {\n    const renta = leerRentaPorId(idRentar);\n    if (!renta) return -1; // Renta no encontrada\n    renta.estatus = estatus;\n    return 0; // Éxito\n}\n\nfunction eliminarRentasPorIdUsuario(idUsuario) {\n    try {\n        // Obtener las rentas asociadas al idUsuario\n        const rentasUsuario = rentas.filter(renta => renta.idUsuario === idUsuario);\n        \n        // Eliminar cada renta\n        rentasUsuario.forEach((renta) => {\n             eliminarRenta(renta.idRentar);\n        });\n\n        return 0; // Éxito\n    } catch (error) {\n        console.error('Error al eliminar rentas por ID de usuario:', error);\n        return -1; // Error\n    }\n}\n\n\n\nasync function eliminarRenta(idRentar) {\n    try {\n\n        // Filtrar las rentas para eliminar la que tenga el idRenta proporcionado\n        rentas = rentas.filter(renta => renta.idRentar !== idRentar);\n\n        return 0; // Éxito\n    } catch (error) {\n        console.error('Error al eliminar renta:', error);\n        return -1; // Error\n    }\n}\n\n\n\nexport { crearUsuario, leerUsuarios, leerUsuarioPorId, actualizarUsuario, eliminarUsuario, \n    crearPelicula, leerPeliculas, leerPeliculaPorId, actualizarPelicula, eliminarPelicula,\n    crearRenta, leerRentas, leerRentaPorId, actualizarRenta, eliminarRenta};\n\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAS,QAAQ;;AAErD;AACA;AACA,SAASC,YAAYA,CAACC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,GAAG,IAAI,EAAEC,KAAK,GAAG,IAAI,EAAEC,cAAc,GAAG,IAAI,EAAEC,SAAS,GAAG,IAAI,EAAE;EAChH;EACA,MAAMC,gBAAgB,GAAGX,QAAQ,CAACY,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACL,KAAK,KAAKA,KAAK,CAAC;EAC1E,IAAIG,gBAAgB,EAAE;IAClBG,KAAK,CAAC,uDAAuD,CAAC;IAC9D,OAAO,CAAC,CAAC,CAAC;EACd;;EAEA;EACA,MAAMC,QAAQ,GAAGf,QAAQ,CAACgB,MAAM,GAAG,CAAC,GAAGhB,QAAQ,CAACA,QAAQ,CAACgB,MAAM,GAAG,CAAC,CAAC,CAACC,SAAS,GAAG,CAAC;;EAElF;EACA,MAAMC,cAAc,GAAGH,QAAQ,GAAG,CAAC;;EAEnC;EACAf,QAAQ,CAACmB,IAAI,CAAC;IACVF,SAAS,EAAEC,cAAc;IACzBd,MAAM,EAAEA,MAAM;IACdC,KAAK,EAAEA,KAAK;IACZE,KAAK,EAAEA,KAAK;IACZD,QAAQ,EAAEA,QAAQ;IAClBE,KAAK,EAAEA,KAAK;IACZC,cAAc,EAAEA,cAAc;IAC9BC,SAAS,EAAEA;EACf,CAAC,CAAC;EAEFI,KAAK,CAAC,kCAAkC,CAAC;EACzC,OAAO,CAAC,CAAC,CAAC;AACd;;AAGA;AACA,SAASM,YAAYA,CAAA,EAAG;EACpB,OAAOpB,QAAQ;AACnB;;AAGA;AACA,SAASqB,gBAAgBA,CAACJ,SAAS,EAAE;EACjC,OAAOjB,QAAQ,CAACY,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACI,SAAS,KAAKA,SAAS,CAAC;AACpE;;AAEA;AACA,SAASK,iBAAiBA,CAACC,EAAE,EAAEnB,MAAM,GAAC,IAAI,EAAEC,KAAK,GAAC,IAAI,EAAEE,KAAK,GAAC,IAAI,EAAED,QAAQ,GAAC,IAAI,EAAEE,KAAK,GAAC,IAAI,EAAEC,cAAc,GAAC,IAAI,EAAEC,SAAS,GAAC,IAAI,EAAE;EAChI,MAAMG,OAAO,GAAGQ,gBAAgB,CAACE,EAAE,CAAC;EACpC,IAAI,CAACV,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEzB;EACA,IAAIL,KAAK,IAAIA,KAAK,KAAKK,OAAO,CAACL,KAAK,EAAE;IAClC,MAAMG,gBAAgB,GAAGX,QAAQ,CAACY,IAAI,CAACY,CAAC,IAAIA,CAAC,CAAChB,KAAK,KAAKA,KAAK,CAAC;IAC9D,IAAIG,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;EACrC;;EAEA;EACA,IAAIP,MAAM,EAAES,OAAO,CAACT,MAAM,GAAGA,MAAM;EACnC,IAAIC,KAAK,EAAEQ,OAAO,CAACR,KAAK,GAAGA,KAAK;EAChC,IAAIE,KAAK,EAAEM,OAAO,CAACN,KAAK,GAAGA,KAAK;EAChC,IAAID,QAAQ,EAAEO,OAAO,CAACP,QAAQ,GAAGA,QAAQ;EACzC,IAAIE,KAAK,EAAEK,OAAO,CAACL,KAAK,GAAGA,KAAK;EAChC,IAAIC,cAAc,EAAEI,OAAO,CAACJ,cAAc,GAAGA,cAAc;EAC3D,IAAIC,SAAS,KAAK,IAAI,EAAEG,OAAO,CAACH,SAAS,GAAGA,SAAS;EAErD,OAAO,CAAC,CAAC,CAAC;AACd;;AAEA;AACA,SAASe,eAAeA,CAACR,SAAS,GAAG,IAAI,EAAE;EACvC,IAAI,CAACA,SAAS,EAAE;IACZ;IACAf,MAAM,CAACwB,MAAM,CAAC,CAAC,EAAExB,MAAM,CAACc,MAAM,CAAC;IAC/B;IACAhB,QAAQ,CAAC0B,MAAM,CAAC,CAAC,EAAE1B,QAAQ,CAACgB,MAAM,CAAC;IACnC,OAAO,CAAC,CAAC,CAAC;EACd,CAAC,MAAM;IACH,MAAMW,KAAK,GAAG3B,QAAQ,CAAC4B,SAAS,CAACf,OAAO,IAAIA,OAAO,CAACI,SAAS,KAAKA,SAAS,CAAC;IAC5E,IAAIU,KAAK,KAAK,CAAC,CAAC,EAAE;MACd;MACAE,0BAA0B,CAACZ,SAAS,CAAC;MACrC;MACAjB,QAAQ,CAAC0B,MAAM,CAACC,KAAK,EAAE,CAAC,CAAC;MACzB,OAAO,CAAC,CAAC,CAAC;IACd,CAAC,MAAM;MACH,OAAO,CAAC,CAAC,CAAC,CAAC;IACf;EACJ;AACJ;AAGA,SAASG,aAAaA,CAAC1B,MAAM,EAAE2B,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EACzD;EACA,MAAMlB,QAAQ,GAAGd,SAAS,CAACe,MAAM,GAAG,CAAC,GAAGf,SAAS,CAACA,SAAS,CAACe,MAAM,GAAG,CAAC,CAAC,CAACkB,UAAU,GAAG,CAAC;;EAEtF;EACAjC,SAAS,CAACkB,IAAI,CAAC;IACXe,UAAU,EAAEnB,QAAQ,GAAG,CAAC;IACxBX,MAAM,EAAEA,MAAM;IACd2B,MAAM,EAAEA,MAAM;IACdC,QAAQ,EAAEA,QAAQ;IAClBC,UAAU,EAAEA;EAChB,CAAC,CAAC;EAEFnB,KAAK,CAAC,kCAAkC,CAAC;EACzC,OAAO,CAAC,CAAC,CAAC;AACd;AAEA,SAASqB,aAAaA,CAAA,EAAG;EACrB,OAAOlC,SAAS;AACpB;AAGA,SAASmC,iBAAiBA,CAACF,UAAU,EAAE;EACnC,OAAOjC,SAAS,CAACW,IAAI,CAACyB,QAAQ,IAAIA,QAAQ,CAACH,UAAU,KAAKA,UAAU,CAAC;AACzE;AAGA,SAASI,kBAAkBA,CAACJ,UAAU,EAAE9B,MAAM,GAAG,IAAI,EAAE2B,MAAM,GAAG,IAAI,EAAEC,QAAQ,GAAG,IAAI,EAAEC,UAAU,GAAG,IAAI,EAAE;EACtG,MAAMI,QAAQ,GAAGD,iBAAiB,CAACF,UAAU,CAAC;EAC9C,IAAI,CAACG,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;EAC1B,IAAIjC,MAAM,EAAEiC,QAAQ,CAACjC,MAAM,GAAGA,MAAM;EACpC,IAAI2B,MAAM,EAAEM,QAAQ,CAACN,MAAM,GAAGA,MAAM;EACpC,IAAIC,QAAQ,EAAEK,QAAQ,CAACL,QAAQ,GAAGA,QAAQ;EAC1C,IAAIC,UAAU,EAAEI,QAAQ,CAACJ,UAAU,GAAGA,UAAU;EAChD,OAAO,CAAC,CAAC,CAAC;AACd;AAIA,SAASM,gBAAgBA,CAACL,UAAU,GAAG,IAAI,EAAE;EACzC,IAAI,CAACA,UAAU,EAAE;IACb;IACAjC,SAAS,CAACyB,MAAM,CAAC,CAAC,EAAEzB,SAAS,CAACe,MAAM,CAAC;;IAErC;IACAwB,aAAa,CAAC,IAAI,CAAC;IAEnB,OAAO,CAAC,CAAC,CAAC;EACd,CAAC,MAAM;IACH,MAAMb,KAAK,GAAG1B,SAAS,CAAC2B,SAAS,CAACS,QAAQ,IAAIA,QAAQ,CAACH,UAAU,KAAKA,UAAU,CAAC;IACjF,IAAIP,KAAK,KAAK,CAAC,CAAC,EAAE;MACd;MACA1B,SAAS,CAACyB,MAAM,CAACC,KAAK,EAAE,CAAC,CAAC;;MAE1B;MACAa,aAAa,CAACN,UAAU,CAAC;MAEzB,OAAO,CAAC,CAAC,CAAC;IACd,CAAC,MAAM;MACH,OAAO,CAAC,CAAC,CAAC,CAAC;IACf;EACJ;AACJ;AAEA,SAASO,UAAUA,CAACxB,SAAS,EAAEiB,UAAU,EAAEQ,WAAW,EAAEC,aAAa,EAAEC,OAAO,EAAE;EAC5E;EACA,MAAMjC,gBAAgB,GAAGU,gBAAgB,CAACJ,SAAS,CAAC;EACpD,IAAI,CAACN,gBAAgB,EAAE;IACnB,OAAO,CAAC,CAAC,CAAC,CAAC;EACf;;EAEA;EACA,MAAMkC,iBAAiB,GAAGT,iBAAiB,CAACF,UAAU,CAAC;EACvD,IAAI,CAACW,iBAAiB,EAAE;IACpB,OAAO,CAAC,CAAC,CAAC,CAAC;EACf;;EAEA;EACA,MAAM9B,QAAQ,GAAGb,MAAM,CAACc,MAAM,GAAG,CAAC,GAAGd,MAAM,CAACA,MAAM,CAACc,MAAM,GAAG,CAAC,CAAC,CAAC8B,QAAQ,GAAG,CAAC;;EAE3E;EACA5C,MAAM,CAACiB,IAAI,CAAC;IACR2B,QAAQ,EAAE/B,QAAQ,GAAG,CAAC;IACtBE,SAAS,EAAEA,SAAS;IACpBiB,UAAU,EAAEA,UAAU;IACtBQ,WAAW,EAAEA,WAAW;IACxBC,aAAa,EAAEA,aAAa;IAC5BC,OAAO,EAAEA,OAAO,CAAC;EACrB,CAAC,CAAC;;EAEF;EACA,OAAO,CAAC;AACZ;AAEA,SAASG,UAAUA,CAAA,EAAG;EAClB,OAAO7C,MAAM;AACjB;AAEA,SAAS8C,cAAcA,CAACF,QAAQ,EAAE;EAC9B,OAAO5C,MAAM,CAACU,IAAI,CAACqC,KAAK,IAAIA,KAAK,CAACH,QAAQ,KAAKA,QAAQ,CAAC;AAC5D;AAEA,SAASI,eAAeA,CAACJ,QAAQ,EAAEF,OAAO,EAAE;EACxC,MAAMK,KAAK,GAAGD,cAAc,CAACF,QAAQ,CAAC;EACtC,IAAI,CAACG,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;EACvBA,KAAK,CAACL,OAAO,GAAGA,OAAO;EACvB,OAAO,CAAC,CAAC,CAAC;AACd;AAEA,SAASf,0BAA0BA,CAACZ,SAAS,EAAE;EAC3C,IAAI;IACA;IACA,MAAMkC,aAAa,GAAGjD,MAAM,CAACkD,MAAM,CAACH,KAAK,IAAIA,KAAK,CAAChC,SAAS,KAAKA,SAAS,CAAC;;IAE3E;IACAkC,aAAa,CAACE,OAAO,CAAEJ,KAAK,IAAK;MAC5BT,aAAa,CAACS,KAAK,CAACH,QAAQ,CAAC;IAClC,CAAC,CAAC;IAEF,OAAO,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,OAAO,CAAC,CAAC,CAAC,CAAC;EACf;AACJ;AAIA,eAAed,aAAaA,CAACM,QAAQ,EAAE;EACnC,IAAI;IAEA;IACA5C,MAAM,GAAGA,MAAM,CAACkD,MAAM,CAACH,KAAK,IAAIA,KAAK,CAACH,QAAQ,KAAKA,QAAQ,CAAC;IAE5D,OAAO,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,CAAC,CAAC,CAAC,CAAC;EACf;AACJ;AAIA,SAASnD,YAAY,EAAEiB,YAAY,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEG,eAAe,EACrFK,aAAa,EAAEK,aAAa,EAAEC,iBAAiB,EAAEE,kBAAkB,EAAEC,gBAAgB,EACrFE,UAAU,EAAEM,UAAU,EAAEC,cAAc,EAAEE,eAAe,EAAEV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}